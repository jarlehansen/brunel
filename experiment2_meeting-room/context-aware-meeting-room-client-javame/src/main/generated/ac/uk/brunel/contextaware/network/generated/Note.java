package ac.uk.brunel.contextaware.network.generated;
// Generated by proto2javame, Mon Feb 22 20:10:24 CET 2010. DO NOT EDIT!

import java.io.IOException;
import java.io.InputStream;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.factory.JavaMeProtoFactory;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.util.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.extended.output.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class Note extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final String btAddress;
	private static final int fieldNumberBtAddress = 1;

	private final String meetingId;
	private static final int fieldNumberMeetingId = 2;
	private final boolean hasMeetingId;

	private final String message;
	private static final int fieldNumberMessage = 3;
	private final boolean hasMessage;


	public static Builder newBuilder() {
		return new Builder();
	}

	private Note(final Builder builder) {
		if (builder.hasBtAddress ) {
			this.btAddress = builder.btAddress;
			this.meetingId = builder.meetingId;
			this.hasMeetingId = builder.hasMeetingId;
			this.message = builder.message;
			this.hasMessage = builder.hasMessage;
		} else {
			throw new UninitializedMessageException("Not all required fields were included, " + 
				" btAddress:" + builder.hasBtAddress + ", all fields that are false are mandatory but were not added");
		}
	}

	public static class Builder {
		private String btAddress;
		private boolean hasBtAddress = false;

		private String meetingId;
		private boolean hasMeetingId = false;

		private String message;
		private boolean hasMessage = false;


		private Builder() {
		}

		public Builder setBtAddress(final String btAddress) {
			this.btAddress = btAddress;
			this.hasBtAddress = true;
			return this;
		}

		public Builder setMeetingId(final String meetingId) {
			this.meetingId = meetingId;
			this.hasMeetingId = true;
			return this;
		}

		public Builder setMessage(final String message) {
			this.message = message;
			this.hasMessage = true;
			return this;
		}

		public Note build() {
			return new Note(this);
		}
	}

	public String getBtAddress() {
		return btAddress;
	}

	public String getMeetingId() {
		return meetingId;
	}

	public boolean hasMeetingId() {
		return hasMeetingId;
	}

	public String getMessage() {
		return message;
	}

	public boolean hasMessage() {
		return hasMessage;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		retValue += "btAddress = " + this.btAddress + TAB;
		if(hasMeetingId) retValue += "meetingId = " + this.meetingId + TAB;
		if(hasMessage) retValue += "message = " + this.message + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	protected int computeSize() {
		int totalSize = 0;
		totalSize += ComputeSizeUtil.computeStringSize(fieldNumberBtAddress, btAddress);
		if(hasMeetingId) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberMeetingId, meetingId);
		if(hasMessage) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberMessage, message);

		return totalSize;
	}

	// Override
	protected void writeFields(final OutputWriter writer) throws IOException {
		writer.writeString(fieldNumberBtAddress, btAddress);
		if(hasMeetingId) writer.writeString(fieldNumberMeetingId, meetingId);
		if(hasMessage) writer.writeString(fieldNumberMessage, message);
		writer.writeData();
	}

	private static Note parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = reader.getNextFieldNumber();
		final Note.Builder builder = new Note.Builder();

		while (nextFieldNumber > 0) {
			switch (nextFieldNumber) {
			case fieldNumberBtAddress:
				builder.setBtAddress(reader.readString(nextFieldNumber));
				break;
			case fieldNumberMeetingId:
				builder.setMeetingId(reader.readString(nextFieldNumber));
				break;
			case fieldNumberMessage:
				builder.setMessage(reader.readString(nextFieldNumber));
				break;
			default:
				 reader.getPreviousTagDataTypeAndReadContent();
			}

			nextFieldNumber = reader.getNextFieldNumber();
		}

		return builder.build();
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		Note.unknownTagHandler = unknownTagHandler;
	}

	public static Note parseFrom(final byte[] data) throws IOException {
		return parseFields(JavaMeProtoFactory.createInputUtil(data, unknownTagHandler));
	}

	public static Note parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(JavaMeProtoFactory.createInputUtil(inputStream, unknownTagHandler));
	}

	public static Note parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(JavaMeProtoFactory.createInputUtil(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}